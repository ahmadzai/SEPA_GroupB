/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package addressBookClassDia.impl;

import addressBookClassDia.Address;
import addressBookClassDia.AddressBookClassDiaFactory;
import addressBookClassDia.AddressBookClassDiaPackage;
import addressBookClassDia.CantactCollection;
import addressBookClassDia.Group;
import addressBookClassDia.Person;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AddressBookClassDiaFactoryImpl extends EFactoryImpl implements AddressBookClassDiaFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static AddressBookClassDiaFactory init() {
		try {
			AddressBookClassDiaFactory theAddressBookClassDiaFactory = (AddressBookClassDiaFactory)EPackage.Registry.INSTANCE.getEFactory("http:///addressBookClassDia.ecore"); 
			if (theAddressBookClassDiaFactory != null) {
				return theAddressBookClassDiaFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new AddressBookClassDiaFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AddressBookClassDiaFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case AddressBookClassDiaPackage.PERSON: return createPerson();
			case AddressBookClassDiaPackage.INT: return createint();
			case AddressBookClassDiaPackage.ADDRESS: return createAddress();
			case AddressBookClassDiaPackage.GROUP: return createGroup();
			case AddressBookClassDiaPackage.CANTACT_COLLECTION: return createCantactCollection();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Person createPerson() {
		PersonImpl person = new PersonImpl();
		return person;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public addressBookClassDia.int createint() {
		intImpl int_ = new intImpl();
		return int_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Address createAddress() {
		AddressImpl address = new AddressImpl();
		return address;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Group createGroup() {
		GroupImpl group = new GroupImpl();
		return group;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CantactCollection createCantactCollection() {
		CantactCollectionImpl cantactCollection = new CantactCollectionImpl();
		return cantactCollection;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AddressBookClassDiaPackage getAddressBookClassDiaPackage() {
		return (AddressBookClassDiaPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static AddressBookClassDiaPackage getPackage() {
		return AddressBookClassDiaPackage.eINSTANCE;
	}

} //AddressBookClassDiaFactoryImpl
